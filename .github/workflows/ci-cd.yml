name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Frontend Build and Test
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci

    - name: Run frontend linting
      run: |
        if [ -f package.json ] && grep -q '"lint"' package.json; then
          npm run lint
        else
          echo "No lint script found, skipping..."
        fi

    - name: Run frontend tests
      run: |
        if [ -f package.json ] && grep -q '"test"' package.json; then
          npm run test -- --coverage --watchAll=false
        else
          echo "No test script found, skipping..."
        fi

    - name: Build frontend
      run: npm run build
      env:
        CI: false  # Treat warnings as warnings, not errors

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 1

  # Backend Build and Test
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: dtime_test
          POSTGRES_USER: dtime_test
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run backend tests
      run: mvn test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/dtime_test
        SPRING_DATASOURCE_USERNAME: dtime_test
        SPRING_DATASOURCE_PASSWORD: test_password
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

    - name: Build backend
      run: mvn clean package -DskipTests
      env:
        SPRING_PROFILES_ACTIVE: prod

    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/target/*.jar
        retention-days: 1

  # Docker Build
  docker-build:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

    - name: Download backend build
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/target/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    needs: [docker-build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Verify Docker Compose availability
      run: |
        echo "Docker version:"
        docker --version
        echo "Docker Compose version:"
        docker compose version
        echo "Available Docker commands:"
        docker --help | grep -E "compose|buildx" || true

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        # Database Configuration
        POSTGRES_DB=dtime_test
        POSTGRES_USER=dtime_test
        POSTGRES_PASSWORD=test_password
        
        # Email Configuration (dummy for testing)
        MAIL_USERNAME=test@example.com
        MAIL_PASSWORD=dummy-password
        
        # Security
        SECURITY_CSRF_ENABLED=false
        
        # Frontend
        REACT_APP_BACKEND_URL=http://localhost:8080
        NODE_ENV=production
        EOF

    - name: Start test environment
      run: |
        # Use the built images for testing
        export BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}"
        export FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}"
        
        # Create a test docker-compose file
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          dtime-db:
            image: postgres:14
            environment:
              POSTGRES_DB: dtime_test
              POSTGRES_USER: dtime_test
              POSTGRES_PASSWORD: test_password
            ports:
              - "5432:5432"
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U dtime_test"]
              interval: 10s
              timeout: 5s
              retries: 5

          dtime-backend:
            image: \${BACKEND_IMAGE}
            environment:
              SPRING_PROFILES_ACTIVE: prod
              POSTGRES_DB: dtime_test
              POSTGRES_USER: dtime_test
              POSTGRES_PASSWORD: test_password
              MAIL_USERNAME: test@example.com
              MAIL_PASSWORD: dummy-password
              SECURITY_CSRF_ENABLED: false
            ports:
              - "8080:8080"
              - "8443:8443"
            depends_on:
              dtime-db:
                condition: service_healthy
            healthcheck:
              test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
              interval: 30s
              timeout: 10s
              retries: 5
              start_period: 60s

          dtime-frontend:
            image: \${FRONTEND_IMAGE}
            environment:
              REACT_APP_BACKEND_URL: http://localhost:8080
              NODE_ENV: production
            ports:
              - "3000:80"
            depends_on:
              dtime-backend:
                condition: service_healthy
            healthcheck:
              test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
              interval: 30s
              timeout: 10s
              retries: 3
        EOF
        
        docker compose -f docker-compose.test.yml up -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        timeout 300s bash -c '
          while ! docker compose -f docker-compose.test.yml ps | grep -q "Up (healthy).*dtime-backend"; do
            echo "Waiting for backend to be ready..."
            sleep 10
          done
        '
        
        timeout 120s bash -c '
          while ! docker compose -f docker-compose.test.yml ps | grep -q "Up (healthy).*dtime-frontend"; do
            echo "Waiting for frontend to be ready..."
            sleep 10
          done
        '

    - name: Run integration tests
      run: |
        echo "Testing backend health endpoint..."
        curl -f http://localhost:8080/actuator/health
        
        echo "Testing backend API endpoints..."
        # Test login endpoint exists
        curl -I http://localhost:8080/api/users 2>/dev/null | head -n 1 | grep -E "(401|403|200)"
        
        echo "Testing frontend availability..."
        curl -f http://localhost:3000/
        
        echo "Testing backend-frontend connectivity..."
        # Check that frontend can reach backend (should get login redirect or API response)
        curl -I http://localhost:3000/api/users 2>/dev/null | head -n 1 | grep -E "(401|403|200|302)"

    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Backend Logs ==="
        docker compose -f docker-compose.test.yml logs dtime-backend
        echo "=== Frontend Logs ==="
        docker compose -f docker-compose.test.yml logs dtime-frontend
        echo "=== Database Logs ==="
        docker compose -f docker-compose.test.yml logs dtime-db

    - name: Cleanup test environment
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v

  # Deployment Test (Dry Run)
  deployment-test:
    needs: [integration-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test deployment scripts
      run: |
        echo "Testing build script..."
        chmod +x ./build-docker.sh
        # Test the build script syntax
        bash -n ./build-docker.sh
        
        echo "Testing deployment script..."
        chmod +x ./deploy.sh
        # Test the deployment script syntax  
        bash -n ./deploy.sh
        
        echo "Testing package script..."
        chmod +x ./package.sh
        # Test the package script syntax
        bash -n ./package.sh

    - name: Validate docker-compose files
      run: |
        echo "Validating docker-compose.yml..."
        docker compose -f docker-compose.yml config -q
        
        echo "Deployment validation completed successfully!"

  # Security Scanning
  security-scan:
    needs: [docker-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Run Trivy vulnerability scanner on frontend  
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: List generated SARIF files
      if: always()
      run: |
        echo "Files in current directory:"
        ls -la *.sarif || echo "No SARIF files found"
        echo "All files:"
        ls -la

    - name: Upload backend SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-backend-results.sarif') != ''
      with:
        sarif_file: trivy-backend-results.sarif
        category: 'backend-security'

    - name: Upload frontend SARIF results  
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-frontend-results.sarif') != ''
      with:
        sarif_file: trivy-frontend-results.sarif
        category: 'frontend-security'